"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("./api");
const static_1 = require("./static");
exports.baseUrl = 'https://xstapi.xstfcyy.com/xstmp';
const BAD_REQUEST_TEXT = '服务器异常，请稍后重试！';
const beforeResponse = (res) => {
    let data = res.data;
    if (data.msg === api_1.httpStatus['200']) {
        return Promise.resolve(data);
    }
    wx.showToast({
        title: data.msg || BAD_REQUEST_TEXT,
        icon: 'none'
    });
    return Promise.reject(data);
};
let build;
build = function (data, resolve, reject) {
    let header = {
        'Content-Type': 'application/x-www-form-urlencoded'
    };
    if (data.use_token) {
      header.authorization = getApp().globalData.user.token;
    }
    let new_data = {
        url: exports.baseUrl + data.url,
        data: data.data,
        method: data.method || 'POST',
        header,
        responseType: data.type || 'text',
        success: res => {
            console.log(res);
            resolve(beforeResponse(res));
        },
        fail: err => {
            wx.showToast({
                title: BAD_REQUEST_TEXT,
                icon: 'none'
            });
            reject(err);
        }
    };
    return new_data;
};
const getNetwork = () => {
    return new Promise((resolve, reject) => {
        wx.getNetworkType({
            success(res) {
                if (res.networkType === 'none') {
                    wx.showToast({
                        title: '未连接到网络！',
                        icon: "none"
                    });
                    reject(res);
                }
                else {
                    resolve(res.networkType);
                }
            },
            fail(err) {
                wx.showToast({
                    title: '获取网络状态失败！',
                    icon: "none"
                });
                reject(err);
            }
        });
    });
};
exports.http = (data) => {
    return getNetwork()
        .then(() => {
        return new Promise((resolve, reject) => {
            let request_option = build(data, resolve, reject);
            if (data.use_token && !getApp().globalData.user.token) {
                reject('获取角色token失败！');
            }
            else {
                wx.request(request_option);
            }
        });
    });
};
exports.upload = (option) => {
    let { url, data, use_token } = option;
    return getNetwork()
        .then(() => {
        let { name, pic, formData = {} } = data;
        let header = use_token ? {
          authorization: getApp().globalData.user.token
        } : {};
        return static_1.ZIP_PIC(pic)
            .then(path => {
            return new Promise((resolve, reject) => {
                wx.uploadFile({
                    url: exports.baseUrl + url,
                    filePath: path,
                    name,
                    formData: formData,
                    header,
                    success(res) {
                        res.data = JSON.parse(res.data);
                        resolve(beforeResponse(res));
                    },
                    fail(err) {
                        console.log(err);
                        reject(err);
                    }
                });
            });
        });
    });
};
//# sourceMappingURL=data:application/json;base64,